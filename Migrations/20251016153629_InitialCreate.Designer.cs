// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251016153629_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ArtistCatalog", b =>
                {
                    b.Property<string>("ArtistId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FetchedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("ArtistId");

                    b.ToTable("ArtistsCatalog");
                });

            modelBuilder.Entity("ArtistGenre", b =>
                {
                    b.Property<string>("ArtistId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Genre")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ArtistId", "Genre");

                    b.HasIndex("Genre");

                    b.ToTable("ArtistGenres");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.Property<int>("Fid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.HasKey("Fid");

                    b.HasIndex("Uid");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex("Uid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderDetail", b =>
                {
                    b.Property<int>("Oid")
                        .HasColumnType("int");

                    b.Property<int>("Pid")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Oid", "Pid");

                    b.HasIndex("Pid");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Pname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Pid");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Spotify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TrackId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("audiobook_chapter_title")
                        .HasColumnType("longtext");

                    b.Property<string>("audiobook_chapter_uri")
                        .HasColumnType("longtext");

                    b.Property<string>("audiobook_title")
                        .HasColumnType("longtext");

                    b.Property<string>("audiobook_uri")
                        .HasColumnType("longtext");

                    b.Property<string>("conn_country")
                        .HasColumnType("longtext");

                    b.Property<string>("episode_name")
                        .HasColumnType("longtext");

                    b.Property<string>("episode_show_name")
                        .HasColumnType("longtext");

                    b.Property<bool?>("incognito_mode")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ip_addr")
                        .HasColumnType("longtext");

                    b.Property<string>("master_metadata_album_album_name")
                        .HasColumnType("longtext");

                    b.Property<string>("master_metadata_album_artist_name")
                        .HasColumnType("longtext");

                    b.Property<string>("master_metadata_track_name")
                        .HasColumnType("longtext");

                    b.Property<int>("ms_played")
                        .HasColumnType("int");

                    b.Property<bool?>("offline")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("offline_timestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("platform")
                        .HasColumnType("longtext");

                    b.Property<string>("reason_end")
                        .HasColumnType("longtext");

                    b.Property<string>("reason_start")
                        .HasColumnType("longtext");

                    b.Property<bool?>("shuffle")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("skipped")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("spotify_episode_uri")
                        .HasColumnType("longtext");

                    b.Property<string>("spotify_track_uri")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ts")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("Spotify");
                });

            modelBuilder.Entity("TrackArtist", b =>
                {
                    b.Property<string>("TrackId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ArtistId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("TrackId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("TrackArtists");
                });

            modelBuilder.Entity("TrackCatalog", b =>
                {
                    b.Property<string>("TrackId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AlbumId")
                        .HasColumnType("longtext");

                    b.Property<string>("AlbumName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FetchedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("TrackId");

                    b.ToTable("TracksCatalog");
                });

            modelBuilder.Entity("TrackGenreWeight", b =>
                {
                    b.Property<string>("TrackId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Genre")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("BuiltAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("TrackId", "Genre");

                    b.ToTable("TrackGenreWeights");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Uname")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Upass")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Uid");

                    b.HasIndex("Uname")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ArtistGenre", b =>
                {
                    b.HasOne("ArtistCatalog", "Artist")
                        .WithMany("Genres")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderDetail", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Oid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Pid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TrackArtist", b =>
                {
                    b.HasOne("ArtistCatalog", "Artist")
                        .WithMany("TrackArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackCatalog", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("ArtistCatalog", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("TrackArtists");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
